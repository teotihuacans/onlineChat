type: edu
files:
- name: src/chat/Main.java
  visible: true
  text: |
    package chat;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() {
            final TestedProgram server = new TestedProgram("chat.server");
            final TestedProgram client1 = new TestedProgram("chat.client");
            final TestedProgram client2 = new TestedProgram("chat.client");
            final TestedProgram client3 = new TestedProgram("chat.client");
            client1.setReturnOutputAfterExecution(false);
            client2.setReturnOutputAfterExecution(false);
            client3.setReturnOutputAfterExecution(false);
            final int executePause = 50;

            server.startInBackground();
            sleep(executePause);
            client1.start();
            sleep(executePause);
            client2.start();
            sleep(executePause);
            client3.start();
            sleep(executePause);
            client3.getOutput();
            client2.getOutput();

            final String client1Start = client1.getOutput().trim();
            if (!"Client started!\nServer: write your name".equals(client1Start.trim())) {
                return CheckResult.wrong("Can't get the \"Client started!\nServer: write your name\" messages");
            }

            client1.execute("First");
            sleep(executePause);

            final String client1Answer1 = client1.getOutput().trim();
            if (!client1Answer1.isEmpty()) {
                return CheckResult.wrong("Client receive a message after successful login, but shouldn't");
            }

            client1.execute("Hello all!");
            sleep(executePause);

            final String client1Answer2 = client1.getOutput().trim();
            if (client1Answer2.isEmpty() || !client1Answer2.equals("First: Hello all!")) {
                return CheckResult.wrong("Client receive wrong message");
            }


            final String client2Answer1 = client2.getOutput().trim();
            if (client2Answer1.trim().equals("First: Hello all!")) {
                return CheckResult.wrong("Client printed a message from chat before login yet!");
            }

            if (!client2Answer1.isEmpty()) {
                return CheckResult.wrong("Client printed a message before login but shouldn't");
            }

            client2.execute("Second");
            sleep(executePause);

            final String client2Answer2 = client2.getOutput().trim();
            if (!client2Answer2.equals("First: Hello all!")) {
                return CheckResult.wrong("Client should receive and print last 10 messages after login");
            }

            client3.execute("First");
            sleep(executePause);

            final String client3Answer1 = client3.getOutput().trim();
            if (client3Answer1.isEmpty() ||
                    !client3Answer1.trim().equals("Server: this name is already taken! Choose another one.")) {
                return CheckResult.wrong(
                        "Can't get the \"Server: this name is already taken! Choose another one.\" " +
                                "message after login with name that is already taken");
            }

            client3.execute("Second");
            sleep(executePause);

            final String client3Answer2 = client3.getOutput().trim();
            if (client3Answer2.isEmpty() ||
                    !client3Answer2.trim().equals("Server: this name is already taken! Choose another one.")) {
                return CheckResult.wrong(
                        "Can't get the \"Server: this name is already taken! Choose another one.\" " +
                                "message after login with name that is already taken");
            }


            client2.execute("Bye bye!");
            sleep(executePause);

            final String client1Answer3 = client1.getOutput().trim();
            final String client2Answer3 = client2.getOutput().trim();

            if (client1Answer3.isEmpty() || client2Answer3.isEmpty())
                return CheckResult.wrong("Client didn't receive a message");

            if (!client1Answer3.equals("Second: Bye bye!")
                    || !client2Answer3.equals("Second: Bye bye!")) {
                return CheckResult.wrong("Client receive a wrong message");
            }

            client2.execute("First message");
            sleep(executePause);
            client2.execute("Second message");
            sleep(executePause);
            client2.execute("Third message");
            sleep(executePause);
            client2.execute("Fourth message");
            sleep(executePause);
            client2.execute("Fifth message");
            sleep(executePause);
            client2.execute("Sixth message");
            sleep(executePause);
            client2.execute("Seventh message");
            sleep(executePause);
            client2.execute("Eighth message");
            sleep(executePause);
            client2.execute("Ninth message");
            sleep(executePause);
            client2.execute("Tenth message");
            sleep(executePause);
            client2.execute("/exit");
            sleep(executePause);

            if (!client2.isFinished()) {
                return CheckResult.wrong("Client's program should shut down after /exit command");
            }

            client3.execute("Third");
            sleep(executePause);

            final String client3Answer3 = client3.getOutput().trim();
            if (!client3Answer3.equals(
                    "Second: First message\n" +
                    "Second: Second message\n" +
                    "Second: Third message\n" +
                    "Second: Fourth message\n" +
                    "Second: Fifth message\n" +
                    "Second: Sixth message\n" +
                    "Second: Seventh message\n" +
                    "Second: Eighth message\n" +
                    "Second: Ninth message\n" +
                    "Second: Tenth message")) {
                return CheckResult.wrong("Client should receive and print 10 last messages after login");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/chat/server/ServerSocketHandler.java
  visible: true
  text: |
    package chat.server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.Socket;

    public class ServerSocketHandler extends Thread {
        private Socket socket;
        private int clientId;

        public ServerSocketHandler(Socket socket, int clientId) {
            this.socket = socket;
            this.clientId = clientId;
        }

        @Override
        public void run() {
            try {
                DataInputStream input = new DataInputStream(socket.getInputStream());
                DataOutputStream output = new DataOutputStream(socket.getOutputStream());
                //long clientId = Thread.currentThread().getId();
                System.out.printf("Client %d connected!\n", clientId);

                while (!socket.isClosed()) {
                    String message = input.readUTF(); //client should send exit and close its conn
                    if (!"/exit".equalsIgnoreCase(message) && !Thread.interrupted()) {
                        System.out.println("Client " + clientId + " sent: " + message);
                        System.out.println("Sent to client " + clientId + ": Count is " +
                                message.split("\\s+").length);
                        output.writeUTF("Count is " + message.split("\\s+").length);
                    } else {
                        socket.close();
                        System.out.println("Client " + clientId + " disconnected!");
                    }
                }
            } catch (IOException e) {
                System.out.println(Thread.currentThread().getId() + ", " +
                        Thread.currentThread().getName() + "stopped. " + e);
            }
        }
    }
  learner_created: true
- name: src/chat/server/Server.java
  visible: true
  text: |+
    package chat.server;
    import java.io.*;
    import java.net.*;
    import java.util.Scanner;

    public class Server extends Thread
    {
        private static final int PORT = 34523;
        private static final String ADDRESS = "127.0.0.1";
        private static final String INITIAL_MSG = "Server started!";
        private Scanner scanner = new Scanner(System.in);
        private int clientId = 1;

        @Override
        public void run() {
            try (ServerSocket server = new ServerSocket(PORT, 50, InetAddress.getByName(ADDRESS))) {
                server.setSoTimeout(12000);
                System.out.println(INITIAL_MSG);
                while (!server.isClosed())
                {
                    ServerSocketHandler newClient = new ServerSocketHandler(server.accept(), clientId++);
                    //System.out.printf("Client %d connected!\n", clientId++);
                    newClient.start();
                    newClient.join(100);
                }

            } catch (SocketTimeoutException | InterruptedException e) {
                //System.out.println("Got socket time out exception.");
            }
            catch (IOException e) {
                e.printStackTrace();
            }
        }

        public static void main(String[] args) throws InterruptedException {
            Server srv = new Server();
            srv.start();
            srv.join(1000L);
        }
    }


  learner_created: true
- name: src/chat/client/Client.java
  visible: true
  text: |
    package chat.client;

    import chat.server.Server;

    import java.io.*;
    import java.net.Socket;
    import java.net.SocketException;
    import java.util.Scanner;

    public class Client extends  Thread
    {
        private static final String SERVER_ADDRESS = "127.0.0.1";
        private static final int SERVER_PORT = 34523;
        private static final String INITIAL_MSG = "Client started!";
        private Scanner scanner = new Scanner(System.in);

        @Override
        public void run() {
            try (
                    Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output  = new DataOutputStream(socket.getOutputStream())
            ) {

                Thread readTr = new Thread(() -> {
                    while(!Thread.currentThread().isInterrupted()) {
                        readAndOutputMessage(input);
                    }
                    //System.out.println("Client read thread interrupted");
                });

                readTr.start();
                readTr.join(100);

                //sentMessage(output, INITIAL_MSG);
                System.out.println(INITIAL_MSG);

                String temp;
                while (true) {
                    if (!sentMessage(output, scanner.nextLine())) {
                        break;
                    }
                }

                readTr.interrupt();
                //socket.close();

            } catch (IOException | InterruptedException e) {
                e.printStackTrace();
            }
        }

        private boolean sentMessage(DataOutputStream out, String message) {
            try {
                out.writeUTF(message);
                if ("/exit".equalsIgnoreCase(message)) {
                    //for server exit also should be sent to close socket
                    return false;
                }
            } catch (EOFException | SocketException ignored) {
                System.out.println("Got exception in client, exited.");
                return false;
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Can't write the message!");
            }
            return true;
        }

        private void readAndOutputMessage(DataInputStream in) {
                try {
                    System.out.println(in.readUTF());
                } catch (EOFException | SocketException ignored) {
                    return;
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("Can't read the message!");
                }
        }

        public static void main(String[] args) throws InterruptedException {
            //do nothing
            Client cl = new Client();
            cl.start();
            cl.join(1000L);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/49/stages/268/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/49/stages/268/implement">JetBrains
    Academy</a>
  time: Tue, 18 May 2021 14:15:09 UTC
record: 4
