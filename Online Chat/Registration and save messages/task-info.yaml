type: edu
files:
- name: src/chat/Main.java
  visible: true
  text: |
    package chat;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class Tests extends StageTest<String> {
        private final int executePause = 50;

        @DynamicTestingMethod
        CheckResult test1_Stage5() {
            final TestedProgram server = new TestedProgram("chat.server");
            final TestedProgram client1 = new TestedProgram("chat.client");
            final TestedProgram client2 = new TestedProgram("chat.client");
            final TestedProgram client3 = new TestedProgram("chat.client");
            client1.setReturnOutputAfterExecution(false);
            client2.setReturnOutputAfterExecution(false);
            client3.setReturnOutputAfterExecution(false);

            server.startInBackground();
            sleep(executePause);
            client1.start();
            sleep(executePause);
            client2.start();
            sleep(executePause);
            client3.start();
            sleep(executePause);
            client3.getOutput();
            client2.getOutput();

            final String client1Start = client1.getOutput().trim();
            if (!client1Start.contains("Server: authorize or register")) {
                return CheckResult.wrong(
                        "Can't find \"Server: authorize or register\" message");
            }

            client1.execute("bla bla bla");
            sleep(executePause);
            final String client1Answer1 = client1.getOutput().trim();
            if (!client1Answer1.contains("Server: you are not in the chat!")) {
                return CheckResult.wrong(
                        "Can't find  \"Server: you are not in the chat!\" " +
                        "message after trying to send a message before /auth or /register commands");
            }

            client1.execute("/auth asdasd asdasd");
            sleep(executePause);
            final String client1Answer2 = client1.getOutput().trim();
            if (!client1Answer2.contains("Server: incorrect login!")) {
                return CheckResult.wrong(
                        "Can't find \"Server: incorrect login!\" " +
                        "message after inputting wrong login and password");
            }

            client2.execute("/registration first pass");
            sleep(executePause);
            final String client2Answer1 = client2.getOutput().trim();
            if (!client2Answer1.contains("Server: the password is too short!")) {
                return CheckResult.wrong(
                        "Can't find \"Server: the password is too short!\" " +
                        "message after trying to register with short password");
            }

            client2.execute("/registration first 12345678");
            sleep(executePause);
            final String client2Answer2 = client2.getOutput().trim();
            if (!client2Answer2.contains("Server: you are registered successfully!")) {
                return CheckResult.wrong(
                        "Can't find \"Server: you are registered successfully!\" " +
                        "message after successful authentication");
            }

            client2.execute("before choosing an addressee");
            sleep(executePause);
            final String client2Answer3 = client2.getOutput().trim();
            if (!client2Answer3.contains("Server: use /list command to choose a user to text!")) {
                return CheckResult.wrong(
                        "Can't find \"Server: use /list command to choose a user to text!\" " +
                        "message before choosing an addressee");
            }

            client2.execute("/list");
            sleep(executePause);
            final String client2Answer4 = client2.getOutput().trim();
            if (!client2Answer4.contains("Server: no one online")) {
                return CheckResult.wrong(
                        "Can't find \"Server: no one online\" message if there are no users online");
            }

            client2.execute("/exit");
            sleep(executePause);
            if (!client2.isFinished()) {
                return CheckResult.wrong("Client should be shut down, after the \"/exit\" command");
            }

            client1.execute("/auth first paasf");
            sleep(executePause);
            final String client1Answer3 = client1.getOutput().trim();
            if (!client1Answer3.contains("Server: incorrect password!")) {
                return CheckResult.wrong(
                        "Can't find \"Server: incorrect password!\" " +
                        "message after inputting a wrong password");
            }

            client1.execute("/auth first 12345678");
            sleep(executePause);
            final String client1Answer4 = client1.getOutput().trim();
            if (!client1Answer4.contains("Server: you are authorized successfully!")) {
                return CheckResult.wrong("Can't find \"Server: you are authorized " +
                        "successfully!\" message after successful authentication");
            }

            client3.execute("/registration first 12345678");
            sleep(executePause);
            final String client3Answer1 = client3.getOutput().trim();
            if (!client3Answer1.contains("Server: this login is already taken! Choose another one.")) {
                return CheckResult.wrong(
                        "Can't find \"Server: this login is already taken! Choose another one.\" " +
                        "message from a client that is trying to register with a login which is already taken");
            }

            client3.execute("/registration second 12345678");
            sleep(executePause);
            final String client3Answer2 = client3.getOutput().trim();
            if (!client3Answer2.contains("Server: you are registered successfully!")) {
                return CheckResult.wrong("Can't get the \"Server: you are registered " +
                        "successfully!\" message after successful authentication");
            }

            client1.execute("/list");
            sleep(executePause);
            final String client1Answer5 = client1.getOutput().trim();
            if (client1Answer5.contains("first")) {
                return CheckResult.wrong("The list of online users contains the client's name, but shouldn't");
            }

            if (!client1Answer5.contains("Server: online: second")) {
                return CheckResult.wrong("A client receive a wrong list of online users. " +
                        "Should be \"Server: online: second\"");
            }

            client1.execute("/chat blabla");
            sleep(executePause);
            final String client1Answer6 = client1.getOutput().trim();
            if (!client1Answer6.contains("Server: the user is not online!")) {
                return CheckResult.wrong("Can't find \"Server: the user is not online!\"" +
                        "after trying to chat using wrong username");
            }

            client1.execute("blabla");
            sleep(executePause);
            final String client1Answer7 = client1.getOutput().trim();
            if (!client1Answer7.contains("Server: use /list command to choose a user to text!")) {
                return CheckResult.wrong("Can't find \"Server: use /list command to " +
                        "choose a user to text!\" after trying to chat without choosing a user");
            }

            client1.execute("/chat second");
            sleep(executePause);

            client1.execute("test");
            sleep(executePause);
            final String client3Answer3 = client3.getOutput().trim();
            if (!client3Answer3.isEmpty()) {
                return CheckResult.wrong("Client \"second\" received a message \"" + client3Answer3 + "\" " +
                        "but shouldn't receive anything");
            }

            client3.execute("/chat first");
            sleep(executePause);
            final String client3Answer4 = client3.getOutput().trim();
            if (!client3Answer4.contains("(new) first: test")) {
                return CheckResult.wrong("Client \"second\" didn't receive " +
                        "a message in a format \"(new) userName: message\". " +
                        "Should be \"(new) first: test\".");
            }

            for (String s : Arrays.asList("1", "2", "3", "4", "5", "6", "7", "8", "9")) {
                client1.execute(s);
                sleep(executePause);
            }
            client3.execute("10");
            sleep(executePause);

            final String client1Answer8 = client1.getOutput().trim();
            if (client1Answer8.contains("new")) {
                return CheckResult.wrong("Client \"first\" should not mark " +
                        "it's messages with \"new\" since he's chatting with the \"second\" right now.");
            }

            String expectedMessages =
                "first: test\n" +
                "first: 1\n" +
                "first: 2\n" +
                "first: 3\n" +
                "first: 4\n" +
                "first: 5\n" +
                "first: 6\n" +
                "first: 7\n" +
                "first: 8\n" +
                "first: 9\n" +
                "second: 10";

            if (!client1Answer8.equals(expectedMessages)) {
                return CheckResult.wrong("Client \"first\" output wrong messages.\n\n" +
                    "Expected:\n" +
                    expectedMessages + "\n\n" +
                    "Found:\n" +
                    client1Answer8);
            }

            final String client3Answer5 = client3.getOutput().trim();
            if (client3Answer5.contains("new")) {
                return CheckResult.wrong("Client \"second\" should not mark " +
                        "it's messages with \"new\" since he's chatting with the \"first\" right now.");
            }

            expectedMessages =
                "first: 1\n" +
                "first: 2\n" +
                "first: 3\n" +
                "first: 4\n" +
                "first: 5\n" +
                "first: 6\n" +
                "first: 7\n" +
                "first: 8\n" +
                "first: 9\n" +
                "second: 10";

            if (!client3Answer5.equals(expectedMessages)) {
                return CheckResult.wrong("Client \"second\" output wrong messages.\n\n" +
                    "Expected:\n" +
                    expectedMessages + "\n\n" +
                    "Found:\n" +
                    expectedMessages);
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult test2() {
            final TestedProgram server2 = new TestedProgram("chat.server");
            final TestedProgram tempClient = new TestedProgram("chat.client");
            final TestedProgram tempClient2 = new TestedProgram("chat.client");
            tempClient.setReturnOutputAfterExecution(false);
            tempClient2.setReturnOutputAfterExecution(false);
            server2.startInBackground();
            sleep(executePause);
            tempClient.start();
            sleep(executePause);
            tempClient2.start();
            sleep(executePause);
            tempClient.getOutput();
            tempClient2.getOutput();

            tempClient.execute("/auth first 12345678");
            sleep(executePause);
            final String tempClientAnswer1 = tempClient.getOutput().trim();
            if (!tempClientAnswer1.equals("Server: you are authorized successfully!")) {
                return CheckResult.wrong("A registered client can't be authenticated after" +
                        " rebooting a server");
            }

            tempClient2.execute("/auth second 12345678");
            sleep(executePause);

            tempClient.execute("/chat second");
            sleep(executePause);
            final String tempClientAnswer2 = tempClient.getOutput().trim();

            String conversation =
                "first: 1\n" +
                "first: 2\n" +
                "first: 3\n" +
                "first: 4\n" +
                "first: 5\n" +
                "first: 6\n" +
                "first: 7\n" +
                "first: 8\n" +
                "first: 9\n" +
                "second: 10";

            if (!tempClientAnswer2.equals(conversation)) {
                return CheckResult.wrong("Conversation between \"first\" and \"second\" " +
                        "hasn't been saved\n\n" +
                    "Expected:\n" +
                    conversation + "\n\n" +
                    "Found:\n" +
                    tempClientAnswer2);
            }

            return CheckResult.correct();
        }


    }
  learner_created: false
- name: src/chat/server/ServerSocketHandler.java
  visible: true
  text: |
    package chat.server;

    import java.io.*;
    import java.net.*;
    import java.util.ArrayList;

    public class ServerSocketHandler extends Thread {
        private Socket socket;
        private Server server;
        private DataInputStream input = null;
        private DataOutputStream output = null;
        private String clName;

        public ServerSocketHandler(Socket socket, Server server) {
            this.socket = socket;
            this.server = server;
            start();
        }

        @Override
        public void run() {
            try {
                input = new DataInputStream(socket.getInputStream());
                output = new DataOutputStream(socket.getOutputStream());

                output.writeUTF("Server: write your name");

                while (true) {
                    clName = input.readUTF();
                    if (server.getClientList().containsValue(clName)) {
                        output.writeUTF("Server: this name is already taken! Choose another one.");
                    } else {
                        server.setClientList(this, clName);
                        break;
                    }
                }

                int listSize = server.getMsgList().size();
                int startVal = Math.max(0, listSize - 10);
                if (listSize > 0) {
                    for(String e : new ArrayList<>(server.getMsgList()).subList(startVal, listSize)) {
                        if (e != null) {
                            output.writeUTF(e); //initial last 10 messages
                        }
                    }
                }

                while (!socket.isClosed()) {
                    try {
                        String message = input.readUTF(); //client should send exit and close its conn

                        if (!"/exit".equalsIgnoreCase(message) && !Thread.interrupted()) {
                            String response = clName + ": " + message;
                            server.setMsgList(response);
                            for (ServerSocketHandler ssh : server.getClientList().keySet()) {
                                ssh.output.writeUTF(response);
                            }
                        } else {
                            server.deleteClientListItem(this);
                            sleep(100);
                            socket.close();
                            if (server.getClientList().size() == 0) {
                                server.interrupt();
                            }
                            break;
                        }
                    } catch (IOException e) {
                        System.out.println("Server Handler exception: " + e);
                    }
                }
            } catch (IOException | InterruptedException e) {
                System.out.println("Server handler: " + e);
            } finally {
            }
        }

    }
  learner_created: true
- name: src/chat/client/Client.java
  visible: true
  text: |-
    package chat.client;

    import java.io.*;
    import java.net.Socket;
    import java.net.SocketException;
    import java.util.Scanner;

    public class Client
    {
        private static final String SERVER_ADDRESS = "127.0.0.1";
        private static final int SERVER_PORT = 34523;
        private static final String INITIAL_MSG = "Client started!";
        private Scanner scanner = new Scanner(System.in);

        public void run() {
            try (
                    Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output  = new DataOutputStream(socket.getOutputStream())
            ) {

                //sentMessage(output, INITIAL_MSG);
                System.out.println(INITIAL_MSG);

                Thread readTr = new Thread(() -> {
                    while(!Thread.currentThread().isInterrupted()) {
                        readAndOutputMessage(input);
                    }
                });

                readTr.start();
                readTr.join(100);

                String temp;
                while (!Thread.currentThread().isInterrupted()) {
                    if (!sentMessage(output, scanner.nextLine())) {
                        readTr.interrupt();
                        readTr.join(40);
                        break;
                    }
                }

            } catch (IOException | InterruptedException e) {
                //e.printStackTrace();
            } finally {
                //System.out.println("Client finished");
            }
        }

        private boolean sentMessage(DataOutputStream out, String message) {
            try {
                out.writeUTF(message);
                if ("/exit".equalsIgnoreCase(message)) {
                    //for server exit also should be sent to close socket
                    return false;
                }
            } catch (EOFException | SocketException e) {
                System.out.println("Exception in client: " + e);
                return false;
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Can't write the message!");
            }
            return true;
        }

        private void readAndOutputMessage(DataInputStream in) {
            try {
                System.out.println(in.readUTF());
            } catch (EOFException | SocketException ignored) {
                return;
            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("Can't read the message!");
            }
        }

        public static void main(String[] args) {
            Client cl = new Client();
            cl.run();
        }
    }
  learner_created: true
- name: src/chat/server/Server.java
  visible: true
  text: |+
    package chat.server;
    import java.io.*;
    import java.net.*;
    import java.util.Scanner;
    import java.util.concurrent.ConcurrentHashMap;
    import java.util.concurrent.ConcurrentLinkedQueue;

    public class Server extends Thread
    {
        private static final int PORT = 34523;
        private static final String ADDRESS = "127.0.0.1";
        private static final String INITIAL_MSG = "Server started!";
        private Scanner scanner = new Scanner(System.in);
        private ConcurrentHashMap<ServerSocketHandler, String> clientList = new ConcurrentHashMap<>();
        private ConcurrentLinkedQueue<String> msgList = new ConcurrentLinkedQueue();

        public ConcurrentHashMap<ServerSocketHandler, String> getClientList() {
            return clientList;
        }

        public void setClientList(ServerSocketHandler clPipe, String clName) {
            clientList.put(clPipe, clName);
        }

        public void deleteClientListItem(ServerSocketHandler clPipe) {
            clientList.remove(clPipe);
        }

        public ConcurrentLinkedQueue<String> getMsgList() {
            return msgList;
        }

        public void setMsgList(String message) {
            msgList.add(message);
        }

        @Override
        public void run() {
            try (
                    ServerSocket server = new ServerSocket(PORT, 50, InetAddress.getByName(ADDRESS))
            ) {
                server.setSoTimeout(12000);
                System.out.println(INITIAL_MSG);

                while (!server.isClosed() && !this.isInterrupted()) {
                    ServerSocketHandler newClient = new ServerSocketHandler(server.accept(), this);
                }

            } catch (SocketTimeoutException e) {
                //System.out.println("Got socket time out exception.");
            }
            catch (IOException e) {
                e.printStackTrace();
            } finally {
                //System.out.println("Server finished");
            }
        }

        public static void main(String[] args) throws InterruptedException {
            Server srv = new Server();
            srv.start();
            srv.join(1000);
        }
    }


  learner_created: true
- name: src/chat/server/SerializationUtils.java
  visible: true
  learner_created: true
- name: stage5/test/Tests.java
  visible: true
  learner_created: true
- name: Server.data
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/49/stages/269/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/49/stages/269/implement">JetBrains
    Academy</a>
  time: Wed, 09 Jun 2021 09:41:26 UTC
record: 5
